use crate::{
    core::{Address, Block, Blocks, PreDefinedOffsets, Relations, Sections},
    prelude::DecompileError,
    Fire,
};
use std::sync::Arc;

/// Trait that gives access to the raw Fireball API.
pub trait FireRaw: Fire {
    /// Analyze the entire file.
    ///
    /// ### Returns
    /// - `Result<Vec<Arc<Block>>, DecompileError>` - the analyzed blocks
    fn analyze_all(&self) -> Result<Vec<Arc<Block>>, DecompileError>;
    /// Analyzes starting from the entry point.
    ///
    /// ### Returns
    /// - `Result<Arc<Block>, DecompileError>` - the analyzed block
    fn analyze_from_entry(&self) -> Result<Arc<Block>, DecompileError>;
    /// Analyzes a block from a given file offset until the block ends.
    ///
    /// ### Arguments
    /// - `address: u64` - the file offset to start analysis
    ///
    /// ### Returns
    /// - `Result<Arc<Block>, DecompileError>` - the analyzed block
    fn analyze_from_file_offset(&self, address: u64) -> Result<Arc<Block>, DecompileError>;
    /// Analyzes a block from a given virtual address until the block ends.
    ///
    /// ### Arguments
    /// - `address: u64` - the virtual address to start analysis
    ///
    /// ### Returns
    /// - `Result<Arc<Block>, DecompileError>` - the analyzed block
    fn analyze_from_virtual_address(&self, address: u64) -> Result<Arc<Block>, DecompileError>;
    /// Analyzes a block from a given `Address` until the block ends.
    ///
    /// ### Arguments
    /// - `address: &Address` - the address to start analysis
    ///
    /// ### Returns
    /// - `Result<Arc<Block>, DecompileError>` - the analyzed block
    fn analyze_block(&self, address: &Address) -> Result<Arc<Block>, DecompileError>;
    /// Returns all section information obtained after analysis.
    ///
    /// ### Returns
    /// - `Arc<Sections>` - the object managing section information of the decompiler
    ///
    /// ### Note
    /// - This function performs no additional computation.
    fn get_sections(&self) -> Arc<Sections>;
    /// Returns predefined data.
    ///
    /// ### Returns
    /// - `Arc<PreDefinedOffsets>` - data predefined inside the binary
    fn get_defined(&self) -> Arc<PreDefinedOffsets>;
    /// Returns blocks generated by analysis.
    ///
    /// ### Returns
    /// - `Arc<Blocks>` - object managing blocks generated by analysis
    fn get_blocks(&self) -> Arc<Blocks>;
    /// Returns connection information for blocks generated by analysis.
    ///
    /// ### Returns
    /// - `Arc<Relations>` - object managing connection information of generated blocks
    fn get_relations(&self) -> Arc<Relations>;
}
