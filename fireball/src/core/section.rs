#![allow(dead_code)]
//! Module that contains structure that contains section's information

/// Struct containing information about a section
#[derive(Debug, Eq, Hash, PartialEq, Clone)]
pub struct Section {
    /// Section Id
    /// This Id generated by Fireball Library, not original file.
    pub(crate) id: usize,
    pub(crate) name: String,
    pub(crate) real_name: Option<String>,
    /// Virtual Address of Section's Starting Point
    ///
    /// Ex.) 0x1000
    pub(crate) virtual_address: u64,
    /// Size of Section's Virtual Address
    ///
    /// Ex.) 0x1E00 means, when section start from 0x1000, this section's end is 0x2E00
    pub(crate) virtual_size: u64,
    /// File Offset of Section's Starting Point
    pub(crate) file_offset: u64,
    /// Size of Section in File
    pub(crate) size_of_file: u64,
}

// Since section information is immutable, it is safe to implement Send.
unsafe impl Send for Section {}

impl std::fmt::Display for Section {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "{:#X} - {:#X}",
            self.virtual_address,
            self.virtual_address + self.virtual_size
        )
    }
}

#[cfg(test)]
mod tests {
    use super::Section;

    #[test]
    fn display_test() {
        let section = Section {
            id: 10,
            name: String::from("test"),
            real_name: Some("TestSection".to_owned()),
            virtual_address: 0x1000,
            virtual_size: 0x2A00,
            file_offset: 0x30B0,
            size_of_file: 0x400C,
        };

        assert_eq!(format!("{}", section), "0x1000 - 0x3A00");
    }
}
