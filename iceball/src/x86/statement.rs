//! x86 (32-bit) instruction statements (mnemonics)

use crate::StatementInner;

/// x86 (32-bit) instruction statements
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub enum X86Statement {
    // Data transfer
    Mov,
    Movzx,
    Movsx,
    Push,
    Pop,
    Pushad,
    Popad,
    Pusha,
    Popa,
    Pushf,
    Popf,
    Pushfd,
    Popfd,
    Xchg,
    Lea,

    // Arithmetic
    Add,
    Sub,
    Adc,
    Sbb,
    Imul,
    Mul,
    Idiv,
    Div,
    Inc,
    Dec,
    Neg,
    Cmp,

    // BCD arithmetic (not in x64)
    Daa,
    Das,
    Aaa,
    Aas,
    Aam,
    Aad,

    // Logical
    And,
    Or,
    Xor,
    Not,
    Test,

    // Shift and rotate
    Shl,
    Shr,
    Sar,
    Rol,
    Ror,
    Rcl,
    Rcr,
    Shld,
    Shrd,

    // Bit manipulation
    Bt,
    Bts,
    Btr,
    Btc,
    Bsf,
    Bsr,

    // Control flow
    Jmp,
    Je,
    Jne,
    Jb,
    Jbe,
    Ja,
    Jae,
    Jl,
    Jle,
    Jg,
    Jge,
    Jo,
    Jno,
    Js,
    Jns,
    Jp,
    Jnp,
    Jcxz,
    Jecxz,
    Loop,
    Loope,
    Loopne,
    Call,
    Ret,
    Retf,
    Int,
    Into,
    Iret,
    Iretd,

    // String operations
    Movs,
    Movsb,
    Movsw,
    Movsd,
    Cmps,
    Cmpsb,
    Cmpsw,
    Cmpsd,
    Scas,
    Scasb,
    Scasw,
    Scasd,
    Lods,
    Lodsb,
    Lodsw,
    Lodsd,
    Stos,
    Stosb,
    Stosw,
    Stosd,
    Rep,
    Repe,
    Repz,
    Repne,
    Repnz,

    // Flag control
    Stc,
    Clc,
    Cmc,
    Std,
    Cld,
    Sti,
    Cli,
    Lahf,
    Sahf,

    // Segment operations
    Lds,
    Les,
    Lfs,
    Lgs,
    Lss,

    // Misc
    Nop,
    Hlt,
    Wait,
    Cpuid,
    Bound,
    Enter,
    Leave,
    Xlat,

    // x87 FPU instructions
    Fld,
    Fst,
    Fstp,
    Fild,
    Fist,
    Fistp,
    Fadd,
    Fsub,
    Fmul,
    Fdiv,
    Fcom,
    Fcomp,
    Fcompp,
    Ftst,
    Fxam,
    Fsqrt,
    Fsin,
    Fcos,
    Fptan,
    Fpatan,
    Fabs,
    Fchs,
    Frndint,
    Fscale,
    Fxtract,
    Fprem,
    Fprem1,
    Fyl2x,
    Fyl2xp1,
    F2xm1,
    Fldz,
    Fld1,
    Fldpi,
    Fldl2e,
    Fldl2t,
    Fldlg2,
    Fldln2,
    Finit,
    Fninit,
    Fclex,
    Fnclex,
    Fstcw,
    Fldcw,
    Fstenv,
    Fldenv,
    Fsave,
    Frstor,
    Fstsw,
    Fnstsw,
    Ffree,
    Fxch,
    Fnop,
    Fwait,

    // MMX instructions
    Movq,
    Movd,
    Packsswb,
    Packssdw,
    Packuswb,
    Punpckhbw,
    Punpckhwd,
    Punpckhdq,
    Punpcklbw,
    Punpcklwd,
    Punpckldq,
    Paddb,
    Paddw,
    Paddd,
    Paddsb,
    Paddsw,
    Paddusb,
    Paddusw,
    Psubb,
    Psubw,
    Psubd,
    Psubsb,
    Psubsw,
    Psubusb,
    Psubusw,
    Pmulhw,
    Pmullw,
    Pmaddwd,
    Pcmpeqb,
    Pcmpeqw,
    Pcmpeqd,
    Pcmpgtb,
    Pcmpgtw,
    Pcmpgtd,
    Pand,
    Pandn,
    Por,
    Pxor,
    Psllw,
    Pslld,
    Psllq,
    Psrlw,
    Psrld,
    Psrlq,
    Psraw,
    Psrad,
    Emms,

    // SSE instructions (subset for 32-bit)
    Movups,
    Movaps,
    Movss,
    Movlps,
    Movhps,
    Movlhps,
    Movhlps,
    Addps,
    Addss,
    Subps,
    Subss,
    Mulps,
    Mulss,
    Divps,
    Divss,
    Rcpps,
    Rcpss,
    Sqrtps,
    Sqrtss,
    Rsqrtps,
    Rsqrtss,
    Maxps,
    Maxss,
    Minps,
    Minss,
    Cmpps,
    Cmpss,
    Comiss,
    Ucomiss,
    Andps,
    Andnps,
    Orps,
    Xorps,
    Shufps,
    Unpckhps,
    Unpcklps,
    Cvtpi2ps,
    Cvtps2pi,
    Cvttps2pi,
    Cvtsi2ss,
    Cvtss2si,
    Cvttss2si,
    Movmskps,
    Ldmxcsr,
    Stmxcsr,

    // SSE2 instructions (subset)
    Movupd,
    Movapd,
    Movsd2, // Renamed to avoid conflict with string MOVSD
    Movlpd,
    Movhpd,
    Addpd,
    Addsd2, // Renamed to avoid conflict
    Subpd,
    Subsd2, // Renamed to avoid conflict
    Mulpd,
    Mulsd,
    Divpd,
    Divsd,
    Sqrtpd,
    Sqrtsd,
    Maxpd,
    Maxsd,
    Minpd,
    Minsd,
    Cmppd,
    Cmpsd2, // Renamed to avoid conflict
    Comisd,
    Ucomisd,
    Andpd,
    Andnpd,
    Orpd,
    Xorpd,
    Shufpd,
    Unpckhpd,
    Unpcklpd,
    Cvtpd2ps,
    Cvtps2pd,
    Cvtsd2ss,
    Cvtss2sd,
    Cvtpd2dq,
    Cvttpd2dq,
    Cvtdq2pd,
    Cvtps2dq,
    Cvttps2dq,
    Cvtdq2ps,
    Cvtpi2pd,
    Cvtpd2pi,
    Cvttpd2pi,
    Cvtsi2sd,
    Cvtsd2si,
    Cvttsd2si,
    Movmskpd,
    Movdqa,
    Movdqu,
    Movq2dq,
    Movdq2q,
    Pmuludq,
    Paddq,
    Psubq,
    Pshufd,
    Pshufhw,
    Pshuflw,
    Punpckhqdq,
    Punpcklqdq,

    // Conditional move (Pentium Pro+)
    Cmova,
    Cmovae,
    Cmovb,
    Cmovbe,
    Cmove,
    Cmovg,
    Cmovge,
    Cmovl,
    Cmovle,
    Cmovne,
    Cmovno,
    Cmovnp,
    Cmovns,
    Cmovo,
    Cmovp,
    Cmovs,

    // Other extensions
    Bswap,
    Cmpxchg,
    Xadd,
    Rdtsc,
    Rdpmc,
    Ud2,
    Wbinvd,
    Invd,
    Invlpg,

    // Lock prefix
    Lock,

    // Unknown instruction
    Unknown,
}

impl StatementInner for X86Statement {
    fn is_jcc(&self) -> bool {
        use X86Statement::*;
        matches!(
            self,
            Je | Jne
                | Jb
                | Jbe
                | Ja
                | Jae
                | Jl
                | Jle
                | Jg
                | Jge
                | Jo
                | Jno
                | Js
                | Jns
                | Jp
                | Jnp
                | Jcxz
                | Jecxz
                | Loope
                | Loopne
        )
    }

    fn is_jmp(&self) -> bool {
        matches!(self, X86Statement::Jmp | X86Statement::Loop)
    }

    fn is_call(&self) -> bool {
        matches!(self, X86Statement::Call)
    }

    fn is_ret(&self) -> bool {
        matches!(
            self,
            X86Statement::Ret | X86Statement::Retf | X86Statement::Iret | X86Statement::Iretd
        )
    }
}

impl std::fmt::Display for X86Statement {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use X86Statement::*;
        let mnemonic = match self {
            // Data transfer
            Mov => "mov",
            Movzx => "movzx",
            Movsx => "movsx",
            Push => "push",
            Pop => "pop",
            Pushad => "pushad",
            Popad => "popad",
            Pusha => "pusha",
            Popa => "popa",
            Pushf => "pushf",
            Popf => "popf",
            Pushfd => "pushfd",
            Popfd => "popfd",
            Xchg => "xchg",
            Lea => "lea",

            // Arithmetic
            Add => "add",
            Sub => "sub",
            Adc => "adc",
            Sbb => "sbb",
            Imul => "imul",
            Mul => "mul",
            Idiv => "idiv",
            Div => "div",
            Inc => "inc",
            Dec => "dec",
            Neg => "neg",
            Cmp => "cmp",

            // BCD arithmetic
            Daa => "daa",
            Das => "das",
            Aaa => "aaa",
            Aas => "aas",
            Aam => "aam",
            Aad => "aad",

            // Logical
            And => "and",
            Or => "or",
            Xor => "xor",
            Not => "not",
            Test => "test",

            // Shift and rotate
            Shl => "shl",
            Shr => "shr",
            Sar => "sar",
            Rol => "rol",
            Ror => "ror",
            Rcl => "rcl",
            Rcr => "rcr",
            Shld => "shld",
            Shrd => "shrd",

            // Bit manipulation
            Bt => "bt",
            Bts => "bts",
            Btr => "btr",
            Btc => "btc",
            Bsf => "bsf",
            Bsr => "bsr",

            // Control flow
            Jmp => "jmp",
            Je => "je",
            Jne => "jne",
            Jb => "jb",
            Jbe => "jbe",
            Ja => "ja",
            Jae => "jae",
            Jl => "jl",
            Jle => "jle",
            Jg => "jg",
            Jge => "jge",
            Jo => "jo",
            Jno => "jno",
            Js => "js",
            Jns => "jns",
            Jp => "jp",
            Jnp => "jnp",
            Jcxz => "jcxz",
            Jecxz => "jecxz",
            Loop => "loop",
            Loope => "loope",
            Loopne => "loopne",
            Call => "call",
            Ret => "ret",
            Retf => "retf",
            Int => "int",
            Into => "into",
            Iret => "iret",
            Iretd => "iretd",

            // String operations
            Movs => "movs",
            Movsb => "movsb",
            Movsw => "movsw",
            Movsd => "movsd",
            Cmps => "cmps",
            Cmpsb => "cmpsb",
            Cmpsw => "cmpsw",
            Cmpsd => "cmpsd",
            Scas => "scas",
            Scasb => "scasb",
            Scasw => "scasw",
            Scasd => "scasd",
            Lods => "lods",
            Lodsb => "lodsb",
            Lodsw => "lodsw",
            Lodsd => "lodsd",
            Stos => "stos",
            Stosb => "stosb",
            Stosw => "stosw",
            Stosd => "stosd",
            Rep => "rep",
            Repe => "repe",
            Repz => "repz",
            Repne => "repne",
            Repnz => "repnz",

            // Flag control
            Stc => "stc",
            Clc => "clc",
            Cmc => "cmc",
            Std => "std",
            Cld => "cld",
            Sti => "sti",
            Cli => "cli",
            Lahf => "lahf",
            Sahf => "sahf",

            // Segment operations
            Lds => "lds",
            Les => "les",
            Lfs => "lfs",
            Lgs => "lgs",
            Lss => "lss",

            // Misc
            Nop => "nop",
            Hlt => "hlt",
            Wait => "wait",
            Cpuid => "cpuid",
            Bound => "bound",
            Enter => "enter",
            Leave => "leave",
            Xlat => "xlat",

            // x87 FPU instructions
            Fld => "fld",
            Fst => "fst",
            Fstp => "fstp",
            Fild => "fild",
            Fist => "fist",
            Fistp => "fistp",
            Fadd => "fadd",
            Fsub => "fsub",
            Fmul => "fmul",
            Fdiv => "fdiv",
            Fcom => "fcom",
            Fcomp => "fcomp",
            Fcompp => "fcompp",
            Ftst => "ftst",
            Fxam => "fxam",
            Fsqrt => "fsqrt",
            Fsin => "fsin",
            Fcos => "fcos",
            Fptan => "fptan",
            Fpatan => "fpatan",
            Fabs => "fabs",
            Fchs => "fchs",
            Frndint => "frndint",
            Fscale => "fscale",
            Fxtract => "fxtract",
            Fprem => "fprem",
            Fprem1 => "fprem1",
            Fyl2x => "fyl2x",
            Fyl2xp1 => "fyl2xp1",
            F2xm1 => "f2xm1",
            Fldz => "fldz",
            Fld1 => "fld1",
            Fldpi => "fldpi",
            Fldl2e => "fldl2e",
            Fldl2t => "fldl2t",
            Fldlg2 => "fldlg2",
            Fldln2 => "fldln2",
            Finit => "finit",
            Fninit => "fninit",
            Fclex => "fclex",
            Fnclex => "fnclex",
            Fstcw => "fstcw",
            Fldcw => "fldcw",
            Fstenv => "fstenv",
            Fldenv => "fldenv",
            Fsave => "fsave",
            Frstor => "frstor",
            Fstsw => "fstsw",
            Fnstsw => "fnstsw",
            Ffree => "ffree",
            Fxch => "fxch",
            Fnop => "fnop",
            Fwait => "fwait",

            // MMX instructions
            Movq => "movq",
            Movd => "movd",
            Packsswb => "packsswb",
            Packssdw => "packssdw",
            Packuswb => "packuswb",
            Punpckhbw => "punpckhbw",
            Punpckhwd => "punpckhwd",
            Punpckhdq => "punpckhdq",
            Punpcklbw => "punpcklbw",
            Punpcklwd => "punpcklwd",
            Punpckldq => "punpckldq",
            Paddb => "paddb",
            Paddw => "paddw",
            Paddd => "paddd",
            Paddsb => "paddsb",
            Paddsw => "paddsw",
            Paddusb => "paddusb",
            Paddusw => "paddusw",
            Psubb => "psubb",
            Psubw => "psubw",
            Psubd => "psubd",
            Psubsb => "psubsb",
            Psubsw => "psubsw",
            Psubusb => "psubusb",
            Psubusw => "psubusw",
            Pmulhw => "pmulhw",
            Pmullw => "pmullw",
            Pmaddwd => "pmaddwd",
            Pcmpeqb => "pcmpeqb",
            Pcmpeqw => "pcmpeqw",
            Pcmpeqd => "pcmpeqd",
            Pcmpgtb => "pcmpgtb",
            Pcmpgtw => "pcmpgtw",
            Pcmpgtd => "pcmpgtd",
            Pand => "pand",
            Pandn => "pandn",
            Por => "por",
            Pxor => "pxor",
            Psllw => "psllw",
            Pslld => "pslld",
            Psllq => "psllq",
            Psrlw => "psrlw",
            Psrld => "psrld",
            Psrlq => "psrlq",
            Psraw => "psraw",
            Psrad => "psrad",
            Emms => "emms",

            // SSE instructions
            Movups => "movups",
            Movaps => "movaps",
            Movss => "movss",
            Movlps => "movlps",
            Movhps => "movhps",
            Movlhps => "movlhps",
            Movhlps => "movhlps",
            Addps => "addps",
            Addss => "addss",
            Subps => "subps",
            Subss => "subss",
            Mulps => "mulps",
            Mulss => "mulss",
            Divps => "divps",
            Divss => "divss",
            Rcpps => "rcpps",
            Rcpss => "rcpss",
            Sqrtps => "sqrtps",
            Sqrtss => "sqrtss",
            Rsqrtps => "rsqrtps",
            Rsqrtss => "rsqrtss",
            Maxps => "maxps",
            Maxss => "maxss",
            Minps => "minps",
            Minss => "minss",
            Cmpps => "cmpps",
            Cmpss => "cmpss",
            Comiss => "comiss",
            Ucomiss => "ucomiss",
            Andps => "andps",
            Andnps => "andnps",
            Orps => "orps",
            Xorps => "xorps",
            Shufps => "shufps",
            Unpckhps => "unpckhps",
            Unpcklps => "unpcklps",
            Cvtpi2ps => "cvtpi2ps",
            Cvtps2pi => "cvtps2pi",
            Cvttps2pi => "cvttps2pi",
            Cvtsi2ss => "cvtsi2ss",
            Cvtss2si => "cvtss2si",
            Cvttss2si => "cvttss2si",
            Movmskps => "movmskps",
            Ldmxcsr => "ldmxcsr",
            Stmxcsr => "stmxcsr",

            // SSE2 instructions
            Movupd => "movupd",
            Movapd => "movapd",
            Movsd2 => "movsd",
            Movlpd => "movlpd",
            Movhpd => "movhpd",
            Addpd => "addpd",
            Addsd2 => "addsd",
            Subpd => "subpd",
            Subsd2 => "subsd",
            Mulpd => "mulpd",
            Mulsd => "mulsd",
            Divpd => "divpd",
            Divsd => "divsd",
            Sqrtpd => "sqrtpd",
            Sqrtsd => "sqrtsd",
            Maxpd => "maxpd",
            Maxsd => "maxsd",
            Minpd => "minpd",
            Minsd => "minsd",
            Cmppd => "cmppd",
            Cmpsd2 => "cmpsd",
            Comisd => "comisd",
            Ucomisd => "ucomisd",
            Andpd => "andpd",
            Andnpd => "andnpd",
            Orpd => "orpd",
            Xorpd => "xorpd",
            Shufpd => "shufpd",
            Unpckhpd => "unpckhpd",
            Unpcklpd => "unpcklpd",
            Cvtpd2ps => "cvtpd2ps",
            Cvtps2pd => "cvtps2pd",
            Cvtsd2ss => "cvtsd2ss",
            Cvtss2sd => "cvtss2sd",
            Cvtpd2dq => "cvtpd2dq",
            Cvttpd2dq => "cvttpd2dq",
            Cvtdq2pd => "cvtdq2pd",
            Cvtps2dq => "cvtps2dq",
            Cvttps2dq => "cvttps2dq",
            Cvtdq2ps => "cvtdq2ps",
            Cvtpi2pd => "cvtpi2pd",
            Cvtpd2pi => "cvtpd2pi",
            Cvttpd2pi => "cvttpd2pi",
            Cvtsi2sd => "cvtsi2sd",
            Cvtsd2si => "cvtsd2si",
            Cvttsd2si => "cvttsd2si",
            Movmskpd => "movmskpd",
            Movdqa => "movdqa",
            Movdqu => "movdqu",
            Movq2dq => "movq2dq",
            Movdq2q => "movdq2q",
            Pmuludq => "pmuludq",
            Paddq => "paddq",
            Psubq => "psubq",
            Pshufd => "pshufd",
            Pshufhw => "pshufhw",
            Pshuflw => "pshuflw",
            Punpckhqdq => "punpckhqdq",
            Punpcklqdq => "punpcklqdq",

            // Conditional move
            Cmova => "cmova",
            Cmovae => "cmovae",
            Cmovb => "cmovb",
            Cmovbe => "cmovbe",
            Cmove => "cmove",
            Cmovg => "cmovg",
            Cmovge => "cmovge",
            Cmovl => "cmovl",
            Cmovle => "cmovle",
            Cmovne => "cmovne",
            Cmovno => "cmovno",
            Cmovnp => "cmovnp",
            Cmovns => "cmovns",
            Cmovo => "cmovo",
            Cmovp => "cmovp",
            Cmovs => "cmovs",

            // Other extensions
            Bswap => "bswap",
            Cmpxchg => "cmpxchg",
            Xadd => "xadd",
            Rdtsc => "rdtsc",
            Rdpmc => "rdpmc",
            Ud2 => "ud2",
            Wbinvd => "wbinvd",
            Invd => "invd",
            Invlpg => "invlpg",

            // Lock prefix
            Lock => "lock",

            // Unknown
            Unknown => "unknown",
        };
        write!(f, "{}", mnemonic)
    }
}

impl X86Statement {
    /// Parse a mnemonic string into an X86Statement
    pub fn parse(mnemonic: &str) -> Result<X86Statement, crate::DisassembleError> {
        use X86Statement::*;

        let statement = match mnemonic.to_lowercase().as_str() {
            // Data transfer
            "mov" => Mov,
            "movzx" => Movzx,
            "movsx" => Movsx,
            "push" => Push,
            "pop" => Pop,
            "pushad" => Pushad,
            "popad" => Popad,
            "pusha" => Pusha,
            "popa" => Popa,
            "pushf" => Pushf,
            "popf" => Popf,
            "pushfd" => Pushfd,
            "popfd" => Popfd,
            "xchg" => Xchg,
            "lea" => Lea,

            // Arithmetic
            "add" => Add,
            "sub" => Sub,
            "adc" => Adc,
            "sbb" => Sbb,
            "imul" => Imul,
            "mul" => Mul,
            "idiv" => Idiv,
            "div" => Div,
            "inc" => Inc,
            "dec" => Dec,
            "neg" => Neg,
            "cmp" => Cmp,

            // BCD arithmetic
            "daa" => Daa,
            "das" => Das,
            "aaa" => Aaa,
            "aas" => Aas,
            "aam" => Aam,
            "aad" => Aad,

            // Logical
            "and" => And,
            "or" => Or,
            "xor" => Xor,
            "not" => Not,
            "test" => Test,

            // Shift and rotate
            "shl" | "sal" => Shl,
            "shr" => Shr,
            "sar" => Sar,
            "rol" => Rol,
            "ror" => Ror,
            "rcl" => Rcl,
            "rcr" => Rcr,
            "shld" => Shld,
            "shrd" => Shrd,

            // Bit manipulation
            "bt" => Bt,
            "bts" => Bts,
            "btr" => Btr,
            "btc" => Btc,
            "bsf" => Bsf,
            "bsr" => Bsr,

            // Control flow
            "jmp" => Jmp,
            "je" | "jz" => Je,
            "jne" | "jnz" => Jne,
            "jb" | "jnae" | "jc" => Jb,
            "jbe" | "jna" => Jbe,
            "ja" | "jnbe" => Ja,
            "jae" | "jnb" | "jnc" => Jae,
            "jl" | "jnge" => Jl,
            "jle" | "jng" => Jle,
            "jg" | "jnle" => Jg,
            "jge" | "jnl" => Jge,
            "jo" => Jo,
            "jno" => Jno,
            "js" => Js,
            "jns" => Jns,
            "jp" | "jpe" => Jp,
            "jnp" | "jpo" => Jnp,
            "jcxz" => Jcxz,
            "jecxz" => Jecxz,
            "loop" => Loop,
            "loope" | "loopz" => Loope,
            "loopne" | "loopnz" => Loopne,
            "call" => Call,
            "ret" | "retn" => Ret,
            "retf" => Retf,
            "int" => Int,
            "into" => Into,
            "iret" => Iret,
            "iretd" => Iretd,

            // String operations
            "movs" => Movs,
            "movsb" => Movsb,
            "movsw" => Movsw,
            "movsd" => Movsd,
            "cmps" => Cmps,
            "cmpsb" => Cmpsb,
            "cmpsw" => Cmpsw,
            "cmpsd" => Cmpsd,
            "scas" => Scas,
            "scasb" => Scasb,
            "scasw" => Scasw,
            "scasd" => Scasd,
            "lods" => Lods,
            "lodsb" => Lodsb,
            "lodsw" => Lodsw,
            "lodsd" => Lodsd,
            "stos" => Stos,
            "stosb" => Stosb,
            "stosw" => Stosw,
            "stosd" => Stosd,
            "rep" => Rep,
            "repe" | "repz" => Repe,
            "repne" | "repnz" => Repne,

            // Flag control
            "stc" => Stc,
            "clc" => Clc,
            "cmc" => Cmc,
            "std" => Std,
            "cld" => Cld,
            "sti" => Sti,
            "cli" => Cli,
            "lahf" => Lahf,
            "sahf" => Sahf,

            // Segment operations
            "lds" => Lds,
            "les" => Les,
            "lfs" => Lfs,
            "lgs" => Lgs,
            "lss" => Lss,

            // Misc
            "nop" => Nop,
            "hlt" => Hlt,
            "wait" | "fwait" => Wait,
            "cpuid" => Cpuid,
            "bound" => Bound,
            "enter" => Enter,
            "leave" => Leave,
            "xlat" | "xlatb" => Xlat,

            // x87 FPU instructions
            "fld" => Fld,
            "fst" => Fst,
            "fstp" => Fstp,
            "fild" => Fild,
            "fist" => Fist,
            "fistp" => Fistp,
            "fadd" => Fadd,
            "fsub" => Fsub,
            "fmul" => Fmul,
            "fdiv" => Fdiv,
            "fcom" => Fcom,
            "fcomp" => Fcomp,
            "fcompp" => Fcompp,
            "ftst" => Ftst,
            "fxam" => Fxam,
            "fsqrt" => Fsqrt,
            "fsin" => Fsin,
            "fcos" => Fcos,
            "fptan" => Fptan,
            "fpatan" => Fpatan,
            "fabs" => Fabs,
            "fchs" => Fchs,
            "frndint" => Frndint,
            "fscale" => Fscale,
            "fxtract" => Fxtract,
            "fprem" => Fprem,
            "fprem1" => Fprem1,
            "fyl2x" => Fyl2x,
            "fyl2xp1" => Fyl2xp1,
            "f2xm1" => F2xm1,
            "fldz" => Fldz,
            "fld1" => Fld1,
            "fldpi" => Fldpi,
            "fldl2e" => Fldl2e,
            "fldl2t" => Fldl2t,
            "fldlg2" => Fldlg2,
            "fldln2" => Fldln2,
            "finit" => Finit,
            "fninit" => Fninit,
            "fclex" => Fclex,
            "fnclex" => Fnclex,
            "fstcw" => Fstcw,
            "fldcw" => Fldcw,
            "fstenv" => Fstenv,
            "fldenv" => Fldenv,
            "fsave" => Fsave,
            "frstor" => Frstor,
            "fstsw" => Fstsw,
            "fnstsw" => Fnstsw,
            "ffree" => Ffree,
            "fxch" => Fxch,
            "fnop" => Fnop,

            // Conditional move
            "cmova" | "cmovnbe" => Cmova,
            "cmovae" | "cmovnb" | "cmovnc" => Cmovae,
            "cmovb" | "cmovnae" | "cmovc" => Cmovb,
            "cmovbe" | "cmovna" => Cmovbe,
            "cmove" | "cmovz" => Cmove,
            "cmovg" | "cmovnle" => Cmovg,
            "cmovge" | "cmovnl" => Cmovge,
            "cmovl" | "cmovnge" => Cmovl,
            "cmovle" | "cmovng" => Cmovle,
            "cmovne" | "cmovnz" => Cmovne,
            "cmovno" => Cmovno,
            "cmovnp" | "cmovpo" => Cmovnp,
            "cmovns" => Cmovns,
            "cmovo" => Cmovo,
            "cmovp" | "cmovpe" => Cmovp,
            "cmovs" => Cmovs,

            // Other extensions
            "bswap" => Bswap,
            "cmpxchg" => Cmpxchg,
            "xadd" => Xadd,
            "rdtsc" => Rdtsc,
            "rdpmc" => Rdpmc,
            "ud2" => Ud2,
            "wbinvd" => Wbinvd,
            "invd" => Invd,
            "invlpg" => Invlpg,

            // Lock prefix
            "lock" => Lock,

            _ => return Err(crate::DisassembleError::UnknownStatement),
        };

        Ok(statement)
    }
}
